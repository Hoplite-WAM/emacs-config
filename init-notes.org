* To Do
;; Work on  expand-region, and maybe hydras? and evil snipe
;; Hydra for olivetti, display linum mode and whitespace mode! Also evil surround
;; for evil make dx act as a cut
;; Set a hydra per major mode at C-h C-m and also a main hydra C-h C-x
;; Highligth thing mode
;; eat terminal emulator
;; in insert mode make C-g exit
;; make whitespace mode have alternating color dots
;; remove traling whitespace at file save
;; automcpleete parenteses is quotes etc
;; Make Shift enter return to normal mode?
;; ability to move windows around up down left right vrtical horizontal etc
;; snippets for colors in hex and rgb with converter
;; snippets for shapes with widths height size etc
;; https://github.com/wcsmith/evil-args
;; an evil binding for moving between 1. alphabet words, numerical blocks, all other characters
;; Make dy act as a cut for copy paste
;; https://github.com/alphapapa/org-web-tools
;; Make new buffers replace current buffers instead of open
;; bookmarks plus tags and music and images
;; Split init into key parts and personal parts
;; email https://opensource.com/article/20/1/emacs-mail-calendar
;; view html from web as org file?
add helm action for helm occur to yank line
add good date input and formatting
add pandoc and other file converting stuff

** Tag Completion
https://stackoverflow.com/questions/19981737/emacs-hashtags-tagslikethisone-autocompletion
* Snippets & Tests

;; ;; Makes i search loop
;; (defun isearch-repeat-forward+ ()
;;   (interactive)
;;   (unless isearch-forward
;;     (goto-char isearch-other-end))
;;   (isearch-repeat-forward)
;;   (unless isearch-success
;;     (isearch-repeat-forward)))

;; (defun isearch-repeat-backward+ ()
;;   (interactive)
;;   (when (and isearch-forward isearch-other-end)
;;     (goto-char isearch-other-end))
;;   (isearch-repeat-backward)
;;   (unless isearch-success
;;     (isearch-repeat-backward)))


;; (define-key isearch-mode-map (kbd "C-s") 'isearch-repeat-forward+)
;; (define-key isearch-mode-map (kbd "C-r") 'isearch-repeat-backward+)
;; ;;

;; (setq isearch-lazy-count t)

;; ;; consistente i search placement
;; (defun isearch-exit-at-front ()
;;   "always exit isearch, at the front of search match."
;;   (interactive)
;;   (isearch-exit)
;;   (when isearch-forward
;;     (goto-char isearch-other-end)))

;; (defun isearch-exit-at-end ()
;;   "Always exit isearch, at the end of search match."
;;   (interactive)
;;   (isearch-exit)
;;   (when (not isearch-forward)
;;       (goto-char isearch-other-end)))

;; (define-key isearch-mode-map (kbd "<return>") #'isearch-exit-at-front)
;; (define-key isearch-mode-map (kbd "C-<return>") #'isearch-exit-at-end)
;; ;;

;; (evil-define-motion foo-forward (count)
;;   "My test motion"
;;   :type inclusive
;;   (forward-char (or count 1)))

;; (require `ido)
;; (setq ido-enable-flex-matching t)
;; (setq ido-everywhere t)
;; (ido-mode t)
;; (setq ido-case-fold t)
;; (fido-vertical-mode)

;;;; Return to normal state after x seconds of inaction
;;(defun evil-normalize-all-buffers ()
;;  "Force a drop to normal state."
;;  ;; (unless (eq evil-state 'normal)
;;    (if (eq evil-state 'insert)
;;    (dolist (buffer (buffer-list))
;;      (set-buffer buffer)
;;      (unless (or (minibufferp)
;;                  (eq evil-state 'emacs))
;;        (evil-force-normal-state)))
;;    (message "Dropped back to normal state in all buffers")))
;;
;;(defvar evil-normal-timer
;;  (run-with-idle-timer 4.0 t #'evil-normalize-all-buffers)
;;  "Drop back to normal state after idle for 4.0 seconds.")

;; ;;New buffers vertical
;; (setq split-height-threshold nil)
;; (setq split-width-threshold 60)

(defun my-rect-line(START END START-AT)
  "Test"
  (interactive "r")
  (rectangle-number-lines START END START-AT "%d")
  )
